// Generated by gencpp from file vlp_fir/send_msgs.msg
// DO NOT EDIT!


#ifndef VLP_FIR_MESSAGE_SEND_MSGS_H
#define VLP_FIR_MESSAGE_SEND_MSGS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vlp_fir
{
template <class ContainerAllocator>
struct send_msgs_
{
  typedef send_msgs_<ContainerAllocator> Type;

  send_msgs_()
    : date(false)
    , num(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , len(0.0)
    , width(0.0)
    , height(0.0)  {
    }
  send_msgs_(const ContainerAllocator& _alloc)
    : date(false)
    , num(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , len(0.0)
    , width(0.0)
    , height(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _date_type;
  _date_type date;

   typedef int32_t _num_type;
  _num_type num;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _len_type;
  _len_type len;

   typedef double _width_type;
  _width_type width;

   typedef double _height_type;
  _height_type height;





  typedef boost::shared_ptr< ::vlp_fir::send_msgs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vlp_fir::send_msgs_<ContainerAllocator> const> ConstPtr;

}; // struct send_msgs_

typedef ::vlp_fir::send_msgs_<std::allocator<void> > send_msgs;

typedef boost::shared_ptr< ::vlp_fir::send_msgs > send_msgsPtr;
typedef boost::shared_ptr< ::vlp_fir::send_msgs const> send_msgsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vlp_fir::send_msgs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vlp_fir::send_msgs_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vlp_fir

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'vlp_fir': ['/home/xyw/BUAA/Graduation/src/vlp_fir/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vlp_fir::send_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vlp_fir::send_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vlp_fir::send_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vlp_fir::send_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vlp_fir::send_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vlp_fir::send_msgs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vlp_fir::send_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bf460c9b2194df7c3ccef2b14e93b960";
  }

  static const char* value(const ::vlp_fir::send_msgs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbf460c9b2194df7cULL;
  static const uint64_t static_value2 = 0x3ccef2b14e93b960ULL;
};

template<class ContainerAllocator>
struct DataType< ::vlp_fir::send_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vlp_fir/send_msgs";
  }

  static const char* value(const ::vlp_fir::send_msgs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vlp_fir::send_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool date\n\
int32 num\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 len\n\
float64 width\n\
float64 height\n\
";
  }

  static const char* value(const ::vlp_fir::send_msgs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vlp_fir::send_msgs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.date);
      stream.next(m.num);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.len);
      stream.next(m.width);
      stream.next(m.height);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct send_msgs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vlp_fir::send_msgs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vlp_fir::send_msgs_<ContainerAllocator>& v)
  {
    s << indent << "date: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.date);
    s << indent << "num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "len: ";
    Printer<double>::stream(s, indent + "  ", v.len);
    s << indent << "width: ";
    Printer<double>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VLP_FIR_MESSAGE_SEND_MSGS_H
